<?php

namespace App\Controller;

use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use App\Entity\Article;
use App\Entity\Comment;
use App\Entity\User;
use App\Repository\ArticleRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use App\Form\NewsFormType as form;
use App\Form\CommentFormType as formComment; 
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
class NewsController extends Controller
{
    /**
     * @Route("/", name="news")
     */
    public function index()
    {
        return $this->render('news/index.html.twig', [
            
        ]);
    }

    /**
     * @Route("/news/article", name="article")
     */
    public function articleShow(ArticleRepository $repo)
    {
    	
    	$article = $repo->findAll();

        return $this->render('news/article.html.twig', [
            'controller_name' => 'NewsController',
            'article'=>$article
        ]);
    }

    /**
     * @Route("/news/create", name="create")
     * @Route("/news/{id}", name="edit")
     */
    public function createArticle(Article $article = null, Request $request, ObjectManager $manager)
    {
    	if (!$article) {
    		$article = new Article();
    	}
    	
    	$form = $this->createForm(form::class, $article);
    	$form->handleRequest($request);
    	if ($form->isSubmitted() && $form->isValid()){
            //upload file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $form->get('image')->getData();

            //nom du file
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            //deplacement du file
            $file->move(
                $this->getParameter('image_directory'),
                $fileName
            );

            //nommage du file dans la bdd
            $article->setImage($fileName);

    		$article->setCreatedAt(new \DateTime());
    		$manager->persist($article);
    		$manager->flush();
    		return $this->redirectToRoute('suite',['id'=> $article->getId()]);
    	}
    	
        return $this->render('news/create.html.twig', [
            'controller_name' => 'NewsController',
            'formNews'=>$form->createView(),
            'edit'=>$article->getId() !== null
        ]);
    }

    /**
     * @Route("/news/searchBar/search", name="searchByTitle")
     */ 
     public function searchBar(ArticleRepository $repo, Request $request, ObjectManager $manager)
        {
                //$em = $this->getDoctrine()->getRepository(Article::class);

                
          
                //get('title') c'est le name a mettre dans le input search,
                //$key recupere l'entréee de l'user
                $key = $request->get('title');

                //$key = $_POST['title'];
                //requete sur le title
                //$search = $repo->findBy(array('title' => $key));
                $search = $repo->findByWord($key);
                if (!($search)) {
                    $search = 'la recherche sur '.$key.' n\'a donnée aucun résultat';
                }elseif ($key === '') {
                    $search = 'veuillez entrez une recherche';
                }
               
            
            
            return $this->render('news/search.html.twig', [
            'article'=>$search
        ]);
        }   

    /**
     * @Route("/news/article/{id}", name="suite")
     */
    public function FunctionName($id, Comment $comment = null,Request $request, ObjectManager $manager, ArticleRepository $repo)
    {
        
        $article = $repo->find($id);
        

        //formulaire commentaire
        $comment = new Comment();
        
        $form = $this->createForm(formComment::class, $comment);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()){
            $comment->setCreatedAt(new \DateTime())
            ->setArticle($article);
           

            $manager->persist($comment);
            $manager->flush();
            return $this->redirectToRoute('suite',['id'=> $article->getId()]);
        }

      
    	return $this->render('news/suite.html.twig',[
            'article'=>$article,
            'comment'=>$form->createView(),
           

        ]);
    }

    /**
     * @Route("/news/delete/{id}")
     * @Method({"DELETE"})
     */

    public function deleteArticle($id, ObjectManager $manager, ArticleRepository $repo)
    {
        $article = $repo->find($id);
        
        $manager->remove($article);
        $manager->flush();

        

        
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
